
electric_fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000026a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c92  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c6  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a4  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  0000200c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bd  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000110  00000000  00000000  000025d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000026e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	f9 c0       	rjmp	.+498    	; 0x208 <__vector_5>
  16:	00 00       	nop
  18:	04 c1       	rjmp	.+520    	; 0x222 <__vector_6>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	86 d0       	rcall	.+268    	; 0x1d0 <main>
  c4:	d0 c0       	rjmp	.+416    	; 0x266 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <INTn_Init>:
 */ 
#include "btn.h"

void INTn_Init(uint8_t n)
{
	BTN_INT_C &= ~(1 << BTN_STOP) & ~(1 << BTN_FAST) & ~(1 << BTN_MID);
  c8:	83 b1       	in	r24, 0x03	; 3
  ca:	8f 78       	andi	r24, 0x8F	; 143
  cc:	83 b9       	out	0x03, r24	; 3
	EICRB |= 1 << ISC41 | 1 << ISC51 | 1 << ISC61;
  ce:	8a b7       	in	r24, 0x3a	; 58
  d0:	8a 62       	ori	r24, 0x2A	; 42
  d2:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 1 << INT4 | 1 << INT5 | 1 << INT6;
  d4:	89 b7       	in	r24, 0x39	; 57
  d6:	80 67       	ori	r24, 0x70	; 112
  d8:	89 bf       	out	0x39, r24	; 57
  da:	08 95       	ret

000000dc <FND_Init>:
	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67
};

void FND_Init(volatile uint8_t *ddr)
{
	*ddr = 0xff;
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	*(ddr + 1) = 0x00;
  e2:	11 82       	std	Z+1, r1	; 0x01
  e4:	08 95       	ret

000000e6 <FND_A_Display>:
}
void FND_A_Display(volatile uint8_t *ddr, uint16_t num)
{
  e6:	dc 01       	movw	r26, r24
	*(ddr + 1) = ~FND_Num[num];
  e8:	fb 01       	movw	r30, r22
  ea:	e0 50       	subi	r30, 0x00	; 0
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	90 81       	ld	r25, Z
  f0:	90 95       	com	r25
  f2:	11 96       	adiw	r26, 0x01	; 1
  f4:	9c 93       	st	X, r25
  f6:	08 95       	ret

000000f8 <FND_C_Display>:
}
void FND_C_Display(volatile uint8_t *ddr, uint16_t str)
{
	*(ddr + 1) = str;
  f8:	fc 01       	movw	r30, r24
  fa:	61 83       	std	Z+1, r22	; 0x01
  fc:	08 95       	ret

000000fe <FND_4_Display>:
}
void FND_4_Display()
{
	static uint8_t position = 0;
	if (fan_state == 0)
  fe:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <fan_state>
 102:	81 11       	cpse	r24, r1
 104:	2d c0       	rjmp	.+90     	; 0x160 <FND_4_Display+0x62>
	{
		switch (position)
 106:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	89 f0       	breq	.+34     	; 0x130 <FND_4_Display+0x32>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	d9 f0       	breq	.+54     	; 0x148 <FND_4_Display+0x4a>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	09 f0       	breq	.+2      	; 0x118 <FND_4_Display+0x1a>
 116:	42 c0       	rjmp	.+132    	; 0x19c <FND_4_Display+0x9e>
		{
			case 1:
			FND_C_PORT &= ~(1 << 1);
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	8d 7f       	andi	r24, 0xFD	; 253
 11c:	88 bb       	out	0x18, r24	; 24
			FND_C_PORT |= 1 << 0 | 1 << 2 | 1 << 3;
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	8d 60       	ori	r24, 0x0D	; 13
 122:	88 bb       	out	0x18, r24	; 24
			FND_C_Display(&FND_4_DDR, STR_O);
 124:	6f e3       	ldi	r22, 0x3F	; 63
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	84 e3       	ldi	r24, 0x34	; 52
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	e5 df       	rcall	.-54     	; 0xf8 <FND_C_Display>
			break;
 12e:	36 c0       	rjmp	.+108    	; 0x19c <FND_4_Display+0x9e>
			case 2:
			FND_C_PORT &= ~(1 << 2);
 130:	88 b3       	in	r24, 0x18	; 24
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	88 bb       	out	0x18, r24	; 24
			FND_C_PORT |= 1 << 0 | 1 << 1 | 1 << 3;
 136:	88 b3       	in	r24, 0x18	; 24
 138:	8b 60       	ori	r24, 0x0B	; 11
 13a:	88 bb       	out	0x18, r24	; 24
			FND_C_Display(&FND_4_DDR, STR_F);
 13c:	61 e7       	ldi	r22, 0x71	; 113
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	84 e3       	ldi	r24, 0x34	; 52
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	d9 df       	rcall	.-78     	; 0xf8 <FND_C_Display>
			break;
 146:	2a c0       	rjmp	.+84     	; 0x19c <FND_4_Display+0x9e>
			case 3:
			FND_C_PORT &= ~(1 << 3);
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	88 bb       	out	0x18, r24	; 24
			FND_C_PORT |= 1 << 1 | 1 << 2 | 1 << 0;
 14e:	88 b3       	in	r24, 0x18	; 24
 150:	87 60       	ori	r24, 0x07	; 7
 152:	88 bb       	out	0x18, r24	; 24
			FND_C_Display(&FND_4_DDR, STR_F);
 154:	61 e7       	ldi	r22, 0x71	; 113
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	84 e3       	ldi	r24, 0x34	; 52
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	cd df       	rcall	.-102    	; 0xf8 <FND_C_Display>
			break;
 15e:	1e c0       	rjmp	.+60     	; 0x19c <FND_4_Display+0x9e>
		}
	}
	else
	{
		switch (position)
 160:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	19 f0       	breq	.+6      	; 0x16e <FND_4_Display+0x70>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	69 f0       	breq	.+26     	; 0x186 <FND_4_Display+0x88>
 16c:	17 c0       	rjmp	.+46     	; 0x19c <FND_4_Display+0x9e>
		{
			case 2:
			FND_C_PORT &= ~(1 << 2);
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	8b 7f       	andi	r24, 0xFB	; 251
 172:	88 bb       	out	0x18, r24	; 24
			FND_C_PORT |= 1 << 0 | 1 << 1 | 1 << 3;
 174:	88 b3       	in	r24, 0x18	; 24
 176:	8b 60       	ori	r24, 0x0B	; 11
 178:	88 bb       	out	0x18, r24	; 24
			FND_C_Display(&FND_4_DDR, STR_O);
 17a:	6f e3       	ldi	r22, 0x3F	; 63
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	84 e3       	ldi	r24, 0x34	; 52
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ba df       	rcall	.-140    	; 0xf8 <FND_C_Display>
			break;
 184:	0b c0       	rjmp	.+22     	; 0x19c <FND_4_Display+0x9e>
			case 3:
			FND_C_PORT &= ~(1 << 3);
 186:	88 b3       	in	r24, 0x18	; 24
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	88 bb       	out	0x18, r24	; 24
			FND_C_PORT |= 1 << 1 | 1 << 2 | 1 << 0;
 18c:	88 b3       	in	r24, 0x18	; 24
 18e:	87 60       	ori	r24, 0x07	; 7
 190:	88 bb       	out	0x18, r24	; 24
			FND_C_Display(&FND_4_DDR, STR_N);
 192:	67 e3       	ldi	r22, 0x37	; 55
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	ae df       	rcall	.-164    	; 0xf8 <FND_C_Display>
			break;
		}
	}
	position = (position + 1) % 4;
 19c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	83 70       	andi	r24, 0x03	; 3
 1a6:	90 78       	andi	r25, 0x80	; 128
 1a8:	99 23       	and	r25, r25
 1aa:	24 f4       	brge	.+8      	; 0x1b4 <FND_4_Display+0xb6>
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	8c 6f       	ori	r24, 0xFC	; 252
 1b0:	9f 6f       	ori	r25, 0xFF	; 255
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1b8:	08 95       	ret

000001ba <pwm_Init>:
    }
}

void pwm_Init()
{
	DDRB |= 1 << PINB4;
 1ba:	87 b3       	in	r24, 0x17	; 23
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	87 bb       	out	0x17, r24	; 23
	// Fast PWM
	TCCR0 |= 1 << WGM01 | 1 << WGM00 | 1 << COM01;
 1c0:	83 b7       	in	r24, 0x33	; 51
 1c2:	88 66       	ori	r24, 0x68	; 104
 1c4:	83 bf       	out	0x33, r24	; 51
	// Prescaler 256, 62,500Hz, 16us
	TCCR0 |= 1 << CS02 | 1 << CS01;
 1c6:	83 b7       	in	r24, 0x33	; 51
 1c8:	86 60       	ori	r24, 0x06	; 6
 1ca:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0;
 1cc:	11 be       	out	0x31, r1	; 49
 1ce:	08 95       	ret

000001d0 <main>:

void pwm_Init();

int main(void)
{	
	FND_Init(&FND_1_DDR);
 1d0:	8a e3       	ldi	r24, 0x3A	; 58
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	83 df       	rcall	.-250    	; 0xdc <FND_Init>
	FND_Init(&FND_4_DDR);
 1d6:	84 e3       	ldi	r24, 0x34	; 52
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	80 df       	rcall	.-256    	; 0xdc <FND_Init>
	FND_C_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;
 1dc:	87 b3       	in	r24, 0x17	; 23
 1de:	8f 60       	ori	r24, 0x0F	; 15
	pwm_Init();
 1e0:	87 bb       	out	0x17, r24	; 23
	INTn_Init(PINE4);
 1e2:	eb df       	rcall	.-42     	; 0x1ba <pwm_Init>
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	70 df       	rcall	.-288    	; 0xc8 <INTn_Init>
	
	OCR0 = 0;
 1e8:	11 be       	out	0x31, r1	; 49
	sei();
 1ea:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		FND_A_Display(&FND_1_DDR, fan_state);
 1ec:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <fan_state>
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	8a e3       	ldi	r24, 0x3A	; 58
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	77 df       	rcall	.-274    	; 0xe6 <FND_A_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	8f e3       	ldi	r24, 0x3F	; 63
 1fa:	9c e9       	ldi	r25, 0x9C	; 156
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x2c>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x32>
		_delay_ms(10);
		FND_4_Display();
 202:	00 00       	nop
 204:	7c df       	rcall	.-264    	; 0xfe <FND_4_Display>
 206:	f2 cf       	rjmp	.-28     	; 0x1ec <main+0x1c>

00000208 <__vector_5>:
	// Prescaler 256, 62,500Hz, 16us
	TCCR0 |= 1 << CS02 | 1 << CS01;
	OCR0 = 0;
}
ISR(INT4_vect)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
	fan_state = STOP;
 212:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <fan_state>
	OCR0 = 0;
 216:	11 be       	out	0x31, r1	; 49
}
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_6>:
ISR(INT5_vect)
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	8f 93       	push	r24
	fan_state = MID;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fan_state>
	OCR0 = 127;
 234:	8f e7       	ldi	r24, 0x7F	; 127
 236:	81 bf       	out	0x31, r24	; 49
}
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_7>:
ISR(INT6_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	8f 93       	push	r24
	fan_state = FAST;
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fan_state>
	OCR0 = 255;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	81 bf       	out	0x31, r24	; 49
 25a:	8f 91       	pop	r24
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
